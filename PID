from time import sleep
from motor import Motor
from encoder import Encoder

# Create left and right `Motor' objects
motor_left = Motor("left", 8, 9, 6)
motor_right = Motor("right", 10, 11, 7)

enc_desired_count = 92

# Create encoder object
ENC_L = 18
ENC_R = 19
enc = Encoder(ENC_L, ENC_R)

m1_speed = motor_left.duty(50)
m2_speed = motor_right.duty(50)

ENC_l_prev_error = 0
ENC_R_prev_error = 0

ENC_l_sum_error = 0
ENC_R_sum_error = 0

while True:
    ENC_l_error = 70 - enc.get_left()
    ENC_R_error = 70 - enc.get_right()

    m1_speed += ENC_l_error * 0.02
    m2_speed += ENC_R_error * 0.02

    m1_speed = max(min(1, m1_speed), 0)
    m2_speed = max(min(1, m2_speed), 0)

    print("e1 {} e2 {}".format(enc.get_left(), enc.get_right()))
    print("m1 {} m2 {}".format(m1_speed, m2_speed))

    enc.clear_count()
    sleep(0.5)

    m1_speed += (ENC_l_error * 0.02) + (ENC_l_prev_error * 0.1)
    m2_speed += (ENC_R_error * 0.02) + (ENC_R_prev_error * 0.1)

    sleep(0.5)
    ENC_l_prev_error = ENC_l_error
    ENC_R_prev_error = ENC_R_error

    m1_speed += (ENC_l_error * 0.02) + (ENC_l_prev_error * 0.1) + (ENC_l_sum_error * 0.005)
    m2_speed += (ENC_R_error * 0.02) + (ENC_R_prev_error * 0.1) + (ENC_R_sum_error * 0.005)
    
    sleep(0.5)
    ENC_l_sum_error += ENC_l_error
    ENC_R_sum_error += ENC_R_error
